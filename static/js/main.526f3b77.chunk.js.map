{"version":3,"sources":["actions.js","components/itemHover/itemHover.js","components/item/item.js","components/mysteryIcon/mysteryIcon.js","components/settings/settings.js","components/progressBar/progressBar.js","components/game/game.js","index.js"],"names":["deselect","value","type","imgPath","process","MainBody","styled","div","Header","HeaderText","Name","Price","Symbol","img","Ability","AbilityHeader","AbilityHeaderCosts","span","AbilityHeaderStat","AbilityText","Attributes","AttributeNumber","Lore","ItemHover","renderUpgrade","items","props","index","upgrade","name","cd","alt","src","mc","desc","renderToggle","toggle","renderActive","active","renderPassive","passive","i","length","push","key","renderUse","use","renderAttributes","attrib","className","header","footer","this","easy","id","dname","cost","lore","React","Component","connect","state","wrapperKeyFrame","keyframes","Wrapper","Icon","attrs","url","FadedIcon","ItemInfo","Item","getItemIndex","selectItem","locked","clickable","selected","includes","dispatch","wrapperRef","createRef","wrapper","current","classList","add","setTimeout","remove","prevProps","prevState","snapshot","imgURL","hover","onClick","ref","MysteryIcon","deselectItem","icon","dialogKeyFrame","Dialog","OptionText","WarningText","ConfirmButton","button","CancelButton","DifficultyButton","Settings","setEasy","setState","isEasy","setHard","setClassic","isClassic","setTimed","apply","classic","onClose","close","warning","disabled","Border","Bar","percent","r","g","ProgressBar","percentage","Page","GameMain","QuizItem","Row","PopUpTextKeyFrames","PopUpText","StatText","LargeText","RestartButton","OptionButton","streakNames","timeSlow","timeNormal","timeFast","Game","getItemData","itemID","generateRandomItems","recipe","curr","filtered","filter","item","itemsToQuiz","materials","splice","componentCosts","recipeCost","RecipeCost","costFiltered","randItems","numRand","rand","Math","floor","random","alreadyPicked","getQuizComponents","components","component","console","log","concat","nextQuiz","j","tmp","currentRecipe","currentQuiz","startTimer","win","getScorePopup","text","amount","streak","max","timeLeft","maxTime","reset","quiz","slice","score","tries","frozen","openSettings","settings","clearInterval","timer","handleSettings","time","setInterval","newTime","createMysteryIcons","indicies","numIcons","icons","createQuizComponents","quizItems","popupRef","itemsWithRecipe","materialIDs","sort","correct","popup","currentStreak","currentScore","currentTries","gg","game","options","initialState","store","createStore","action","produce","draft","indexOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.526f3b77.chunk.js","sourcesContent":["export function select(value) {\r\n    return {\r\n        type : \"SELECT\",\r\n        value\r\n    };\r\n}\r\n\r\nexport function deselect(value) {\r\n    return {\r\n        type : \"DESELECT\",\r\n        value\r\n    };\r\n}\r\n\r\nexport function reset() {\r\n    return {\r\n        type : \"RESET\"\r\n    };\r\n}\r\n\r\nexport function applySettings(value) {\r\n    return {\r\n        type : \"APPLY_SETTINGS\",\r\n        value\r\n    };\r\n}\r\n\r\nexport function setDifficulty(value) {\r\n    return {\r\n        type : \"SET_DIFFICULTY\",\r\n        value\r\n    };\r\n}\r\n\r\nexport function setGameMode(value) {\r\n    return {\r\n        type : \"SET_GAME_MODE\",\r\n        value\r\n    };\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport items from '../../data/items.json';\r\nimport styled from 'styled-components';\r\n\r\nconst imgPath = process.env.PUBLIC_URL + '/images/';\r\n\r\nconst MainBody = styled.div`\r\n    border: 2px rgb(70, 70, 70) groove;\r\n    background-color: #333333;\r\n    color: #cccccc;\r\n    width: 310px;\r\n    text-align: left;\r\n`;\r\n\r\nconst Header = styled.div`\r\n    display: flex;\r\n    padding: 5px 5px 0px 5px;\r\n`;\r\n\r\nconst HeaderText = styled.div`\r\n    display: flex;\r\n    margin-left: 10px;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst Name = styled.div`\r\n    color: white;\r\n    font-size: 14pt;\r\n    font-weight: bold;\r\n`;\r\n\r\nconst Price = styled.div`\r\n    color: gold;\r\n    font-weight: bold;\r\n    display: flex;\r\n`;\r\n\r\nconst Symbol = styled.img`\r\n    margin: auto 5px auto 0px;\r\n    max-height: 1em;\r\n`;\r\n\r\nconst Ability = styled.div`\r\n    background-color:#212b3d;\r\n    margin-top: 1em;\r\n`;\r\n\r\nconst AbilityHeader = styled.div`\r\n    background-color:rgb(64, 76, 99);\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 5px;\r\n    font-weight: bold;\r\n`;\r\n\r\nconst AbilityHeaderCosts = styled.span`\r\n    display: flex;\r\n`;\r\n\r\nconst AbilityHeaderStat = styled.span`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin: auto 0;\r\n    margin-left: 10px;\r\n`;\r\n\r\nconst AbilityText = styled.div`\r\n    padding: 5px;\r\n    white-space: pre-wrap;\r\n`;\r\n\r\nconst Attributes = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 5px;\r\n    margin-bottom: -0.5em;\r\n`;\r\n\r\nconst AttributeNumber = styled.span`\r\n    color:#efefef\r\n`;\r\n\r\nconst Lore = styled.div`\r\n    padding: 5px;\r\n    font-style: italic;\r\n    color: #aaaaaa\r\n`;\r\nclass ItemHover extends React.Component {\r\n\r\n    renderUpgrade = () => {\r\n        if (\"upgrade\" in items[this.props.index]) {\r\n            return ( \r\n                <Ability>\r\n                    <AbilityHeader>\r\n                        Upgrade: {items[this.props.index].upgrade[0].name}\r\n                        <AbilityHeaderCosts>\r\n                            {items[this.props.index].cd !== false && \r\n                                <AbilityHeaderStat>\r\n                                    <Symbol alt=\"\" src={imgPath + \"cooldown.png\"} />\r\n                                    {items[this.props.index].cd}\r\n                                </AbilityHeaderStat>\r\n                            }\r\n                            {items[this.props.index].mc !== false && \r\n                                <AbilityHeaderStat>\r\n                                    <Symbol alt=\"\" src={imgPath + \"mana.png\"} />\r\n                                    {items[this.props.index].mc}\r\n                                </AbilityHeaderStat>\r\n                            }\r\n                        </AbilityHeaderCosts>\r\n                    </AbilityHeader>\r\n                    <AbilityText>{items[this.props.index].upgrade[0].desc}</AbilityText>\r\n                </Ability>\r\n            );\r\n        }\r\n        return;\r\n    }\r\n\r\n    renderToggle = () => {\r\n        if (\"toggle\" in items[this.props.index]) {\r\n            return (\r\n                <Ability>\r\n                    <AbilityHeader>\r\n                        Toggle: {items[this.props.index].toggle[0].name}\r\n                        <AbilityHeaderCosts>\r\n                            {items[this.props.index].cd !== false && \r\n                                <AbilityHeaderStat>\r\n                                    <Symbol alt=\"\" src={imgPath + \"cooldown.png\"} />\r\n                                    {items[this.props.index].cd}\r\n                                </AbilityHeaderStat>\r\n                            }\r\n                            {items[this.props.index].mc !== false && \r\n                                <AbilityHeaderStat>\r\n                                    <Symbol alt=\"\" src={imgPath + \"mana.png\"} />\r\n                                    {items[this.props.index].mc}\r\n                                </AbilityHeaderStat>\r\n                            }\r\n                        </AbilityHeaderCosts>\r\n                        \r\n                    </AbilityHeader>\r\n                    <AbilityText>{items[this.props.index].toggle[0].desc}</AbilityText>\r\n                </Ability>\r\n            );\r\n        }\r\n        return;\r\n    }\r\n\r\n    renderActive = () => {\r\n        if (\"active\" in items[this.props.index]) {\r\n            return (\r\n                <Ability>\r\n                    <AbilityHeader>\r\n                        Active: {items[this.props.index].active[0].name}\r\n                        <AbilityHeaderCosts>\r\n                            {items[this.props.index].cd !== false && \r\n                                <AbilityHeaderStat>\r\n                                    <Symbol alt=\"\" src={imgPath + \"cooldown.png\"} />\r\n                                    {items[this.props.index].cd}\r\n                                </AbilityHeaderStat>\r\n                            }\r\n                            {items[this.props.index].mc !== false && \r\n                                <AbilityHeaderStat>\r\n                                    <Symbol alt=\"\" src={imgPath + \"mana.png\"} />\r\n                                    {items[this.props.index].mc}\r\n                                </AbilityHeaderStat>\r\n                            }\r\n                        </AbilityHeaderCosts>\r\n                    </AbilityHeader>\r\n                    <AbilityText>{items[this.props.index].active[0].desc}</AbilityText>\r\n                </Ability>\r\n            );\r\n        }\r\n        return;\r\n    }\r\n\r\n    renderPassive = () => {\r\n        let passive = [];\r\n        if (\"passive\" in items[this.props.index]) {\r\n            for (let i = 0; i < items[this.props.index].passive.length; i++) {\r\n                passive.push(\r\n                    <Ability key={i}>\r\n                        <AbilityHeader>\r\n                            Passive: {items[this.props.index].passive[i].name}\r\n                        </AbilityHeader>\r\n                        <AbilityText>{items[this.props.index].passive[i].desc}</AbilityText>\r\n                    </Ability>\r\n                );\r\n            }\r\n        }\r\n        return passive;\r\n    }\r\n\r\n    renderUse = () => {\r\n        if (\"use\" in items[this.props.index]) {\r\n            return (\r\n                <Ability>\r\n                    <AbilityHeader>\r\n                        Use: {items[this.props.index].use[0].name}\r\n                        <AbilityHeaderCosts>\r\n                            {items[this.props.index].cd !== false && \r\n                                <AbilityHeaderStat>\r\n                                    <Symbol alt=\"\" src={imgPath + \"cooldown.png\"} />\r\n                                    {items[this.props.index].cd}\r\n                                </AbilityHeaderStat>\r\n                            }\r\n                            {items[this.props.index].mc !== false && \r\n                                <AbilityHeaderStat>\r\n                                    <Symbol alt=\"\" src={imgPath + \"mana.png\"} />\r\n                                    {items[this.props.index].mc}\r\n                                </AbilityHeaderStat>\r\n                            }\r\n                        </AbilityHeaderCosts>\r\n                    </AbilityHeader>\r\n                    <AbilityText>{items[this.props.index].use[0].desc}</AbilityText>\r\n                </Ability>\r\n            );\r\n        }\r\n        return;\r\n    }\r\n\r\n    renderAttributes = () => {\r\n        let attrib = [];\r\n        for (let i = 0; i < items[this.props.index].attrib.length; i++) {\r\n            attrib.push(\r\n                <span key={i} className=\"itemAttribText\">\r\n                    {items[this.props.index].attrib[i].header}\r\n                    <AttributeNumber>\r\n                        {items[this.props.index].attrib[i].value + \" \"}\r\n                    </AttributeNumber>\r\n                    {items[this.props.index].attrib[i].footer}\r\n                </span>\r\n            )\r\n        }\r\n        return attrib;\r\n    }\r\n\r\n    render() {\r\n        if (this.props.index === -1) {\r\n            return (\r\n                <MainBody>\r\n                    <Header>\r\n                        <div>\r\n                            <img alt=\"\" src={imgPath + 'recipe_lg.png'}/>\r\n                        </div>\r\n                        <HeaderText>\r\n                            <Name>Recipe</Name>\r\n                        </HeaderText>\r\n                    </Header>\r\n                </MainBody>\r\n            );\r\n        } else {\r\n            if (this.props.easy) {\r\n                return (\r\n                    <MainBody>\r\n                        <Header>\r\n                            <div>\r\n                                <img alt=\"\" src={imgPath + items[this.props.index].id + \"_lg.png\"} />\r\n                            </div>\r\n                            <HeaderText>\r\n                                <Name>{items[this.props.index].dname}</Name>\r\n                                <Price>\r\n                                    <Symbol alt=\"\" src={imgPath + \"gold.png\"} />\r\n                                    {items[this.props.index].cost}\r\n                                </Price>\r\n                            </HeaderText>\r\n                        </Header>\r\n                        <Attributes>\r\n                            {this.renderAttributes()}\r\n                        </Attributes>\r\n                        {this.renderUpgrade()}\r\n                        {this.renderToggle()}\r\n                        {this.renderActive()}\r\n                        {this.renderPassive()}\r\n                        {this.renderUse()}\r\n                        <Lore>\r\n                            {items[this.props.index].lore}\r\n                        </Lore>\r\n                    </MainBody>\r\n                );\r\n            } else {\r\n                return (\r\n                    <MainBody>\r\n                        <Header>\r\n                            <div>\r\n                                <img alt=\"\" src={imgPath + items[this.props.index].id + \"_lg.png\"} />\r\n                            </div>\r\n                            <HeaderText>\r\n                                <Name>{items[this.props.index].dname}</Name>\r\n                            </HeaderText>\r\n                        </Header>\r\n                    </MainBody>\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        easy: state.easy\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(ItemHover);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport items from '../../data/items.json';\r\nimport ItemHover from '../itemHover/itemHover.js';\r\nimport { select, deselect} from '../../actions.js';\r\nimport styled , { keyframes } from 'styled-components';\r\n\r\nconst imgPath = process.env.PUBLIC_URL + '/images/';\r\n\r\nconst wrapperKeyFrame = keyframes`\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        opacity 1;\r\n    }\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n    margin: 1%;\r\n    border: 2px #343434 solid;\r\n    &.fade-in {\r\n        z-index: -1;\r\n        animation: ${wrapperKeyFrame} 0.3s ease-in-out 0s 1;\r\n    }\r\n`;\r\n\r\nconst Icon = styled.div.attrs(props => ({\r\n    url: props.url,\r\n}))`\r\n    background-size: cover;\r\n    width: 4.4vw;\r\n    height: 3.21vw;\r\n    background-image: url(${props => props.url});\r\n`;\r\n\r\nconst FadedIcon = styled.div.attrs(props => ({\r\n    url: props.url,\r\n}))`\r\n    background-size: cover;\r\n    width: 4.4vw;\r\n    height: 3.21vw;\r\n    filter: saturate(10%) opacity(50%);\r\n    background-image: url(${props => props.url});\r\n    z-index: 0;\r\n`;\r\n\r\nconst ItemInfo = styled.div`\r\n    display: none;\r\n    z-index: 1;\r\n    margin-top: 3px;\r\n    margin-left: -2px;\r\n    position: absolute;\r\n    pointer-events: none;\r\n    ${Wrapper}:hover & {\r\n        display: block;\r\n    }\r\n`;\r\n\r\nclass Item extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.wrapperRef = React.createRef();\r\n    }\r\n\r\n    getItemIndex = () => {\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (items[i].id === this.props.id) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    selectItem = () => {\r\n        if (this.props.locked !== true && this.props.clickable === true) {\r\n            if (this.props.selected.includes(this.props.index)) {\r\n                this.props.dispatch(deselect(this.props.index));\r\n            } else {\r\n                this.props.dispatch(select(this.props.index));\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const wrapper = this.wrapperRef.current;\r\n        wrapper.classList.add('fade-in');\r\n        setTimeout(() => {\r\n            wrapper.classList.remove('fade-in');\r\n        }, 300)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.locked === true) {\r\n            const wrapper = this.wrapperRef.current;\r\n            wrapper.classList.add('fade-in');\r\n            setTimeout(() => {\r\n                wrapper.classList.remove('fade-in');\r\n            }, 300)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let imgURL, hover;\r\n        if (this.props.id === \"recipe\") {\r\n            imgURL = imgPath + \"recipe_lg.png\"\r\n            hover = <ItemHover index={-1}></ItemHover>\r\n        } else {\r\n            imgURL = imgPath + this.props.id + \"_lg.png\"\r\n            hover = <ItemHover index={this.getItemIndex()}></ItemHover>\r\n        }\r\n        let div;\r\n        if (this.props.selected.includes(this.props.index)) {\r\n            div = <FadedIcon url={imgURL} onClick={this.selectItem}></FadedIcon>\r\n        } else {\r\n            div = <Icon url={imgURL} onClick={this.selectItem}></Icon>\r\n        }\r\n\r\n        return(\r\n            <Wrapper ref={this.wrapperRef}>\r\n                {div}\r\n                <ItemInfo>\r\n                    {hover}\r\n                </ItemInfo>\r\n            </Wrapper>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        selected : state.selected\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Item);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport items from '../../data/items.json';\r\nimport ItemHover from '../itemHover/itemHover.js';\r\nimport { deselect } from '../../actions.js';\r\nimport styled , { keyframes } from 'styled-components';\r\n\r\nconst imgPath = process.env.PUBLIC_URL + '/images/';\r\n\r\nconst wrapperKeyFrame = keyframes`\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        opacity 1;\r\n    }\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n    margin: 1%;\r\n    border: 2px #343434 solid;\r\n    &.fade-in {\r\n        z-index: -1;\r\n        animation: ${wrapperKeyFrame} 0.3s ease-in-out 0s 1;\r\n    }\r\n`;\r\n\r\nconst Icon = styled.div.attrs(props => ({\r\n    url: props.url,\r\n}))`\r\n    background-size: cover;\r\n    width: 4.4vw;\r\n    height: 3.21vw;\r\n    background-image: url(${props => props.url});\r\n`;\r\n\r\nconst ItemInfo = styled.div`\r\n    display: none;\r\n    z-index: 1;\r\n    margin-top: 3px;\r\n    margin-left: -2px;\r\n    pointer-events: none;\r\n    ${Wrapper}:hover & {\r\n        display: block;\r\n        position: absolute;\r\n    }\r\n`;\r\n\r\nclass MysteryIcon extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.wrapperRef = React.createRef();\r\n    }\r\n\r\n    getItemIndex = () => {\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (items[i].id === this.props.id) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    deselectItem = () => {\r\n        this.props.dispatch(deselect(this.props.index));\r\n    }\r\n\r\n    componentDidMount() {\r\n        const wrapper = this.wrapperRef.current;\r\n        wrapper.classList.add('fade-in');\r\n        setTimeout(() => {\r\n            wrapper.classList.remove('fade-in');\r\n        }, 300)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if ((prevProps.id === 'unknown' && this.props.id !== 'unknown') || (this.props.id === 'unknown' && prevProps.id !== 'unknown')) {\r\n            const wrapper = this.wrapperRef.current;\r\n            wrapper.classList.add('fade-in');\r\n            setTimeout(() => {\r\n                wrapper.classList.remove('fade-in');\r\n            }, 300)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let icon, hover;\r\n        if (this.props.id === 'unknown') {\r\n            icon = <Icon url={imgPath + \"item-slot-unknown.png\"}></Icon>\r\n            hover = <div></div>;\r\n        } else if (this.props.id === \"recipe\") {\r\n            icon = <Icon url={imgPath + \"recipe_lg.png\"} onClick={this.deselectItem}></Icon>\r\n            hover = <ItemInfo>\r\n                        <ItemHover index={-1}></ItemHover>\r\n                    </ItemInfo>\r\n        } else {\r\n            icon = <Icon url={imgPath + this.props.id + \"_lg.png\"} onClick={this.deselectItem}></Icon>\r\n            hover = <ItemInfo>\r\n                        <ItemHover index={this.getItemIndex()}></ItemHover>\r\n                    </ItemInfo>\r\n        }\r\n        return (\r\n            <Wrapper ref={this.wrapperRef}>\r\n                {icon}\r\n                {hover}\r\n            </Wrapper>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        selected : state.selected\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(MysteryIcon);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { applySettings } from '../../actions.js';\r\nimport styled, { keyframes } from 'styled-components';\r\n\r\nconst dialogKeyFrame = keyframes`\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n`;\r\nconst Dialog = styled.div`s\r\n    width: 100%;\r\n    text-algin: center;\r\n    margin-top: -0.5em;\r\n    animation: ${dialogKeyFrame} 0.25s ease-in-out 0s 1;\r\n`;\r\n\r\nconst OptionText = styled.div`\r\n    font-size: 1.25em;\r\n    margin: 0.5em 0em;\r\n`;\r\n\r\nconst WarningText = styled.div`\r\n    font-size: 1em;\r\n    margin: 0.5em;\r\n    color: red;\r\n    min-height: 21px;\r\n`;\r\n\r\nconst ConfirmButton = styled.button`\r\n    background-color: #224022;\r\n    border: 1px solid #336033;\r\n    text-align: center;\r\n    color: #33ca33;\r\n    font-size: 1.25em;\r\n    padding: 6px 22px;\r\n    margin: 0em 0.5em 0.25em 0.5em;\r\n`;\r\n\r\nconst CancelButton = styled.button`\r\n    background-color: #601a1a;\r\n    border: 1px solid #703333;\r\n    text-align: center;\r\n    color: #da2222;\r\n    font-size: 1.25em;\r\n    padding: 6px 22px;\r\n    margin: 0em 0.5em 0.25em 0.5em;\r\n`;\r\n\r\nconst DifficultyButton = styled.button`\r\n    background-color: #2d2d2d;\r\n    border: 2px groove #3d3d3d;\r\n    text-align: center;\r\n    padding: 6px 22px;\r\n    color: #aaaaaa;\r\n    font-size: 1em;\r\n    margin: 0em 0.5em 0em 0.5em;\r\n    &:disabled {\r\n        background-color: #444444;\r\n        color: #dddddd;\r\n        border: 2px solid #666666;\r\n    }\r\n`;\r\n\r\nclass Settings extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isEasy: this.props.easy,\r\n            isClassic: this.props.classic\r\n        }\r\n    }\r\n    \r\n    setEasy = () => {\r\n        this.setState({isEasy : true});\r\n    }\r\n\r\n    setHard = () => {\r\n        this.setState({isEasy : false});\r\n    }\r\n\r\n    setClassic = () => {\r\n        this.setState({isClassic : true});\r\n    }\r\n\r\n    setTimed = () => {\r\n        this.setState({isClassic : false});\r\n    }\r\n\r\n    apply = () => {\r\n        if (this.state.isEasy === this.props.easy && this.state.isClassic === this.props.classic) {\r\n            this.props.onClose(false);\r\n        } else {\r\n            this.props.onClose(true);\r\n            this.props.dispatch(applySettings({easy: this.state.isEasy, classic: this.state.isClassic}));\r\n        }\r\n    }\r\n\r\n    close = () => {\r\n        this.props.onClose(false);\r\n    }\r\n\r\n    render() {\r\n        let warning = \"Changing options will reset game progress!\";\r\n        if (this.state.isEasy === this.props.easy && this.state.isClassic === this.props.classic) {\r\n            warning = \" \";\r\n        }\r\n        return (\r\n            <Dialog>\r\n                <OptionText>Difficulty</OptionText>\r\n                <div>\r\n                    <DifficultyButton onClick={this.setEasy} disabled={this.state.isEasy}>Easy</DifficultyButton>\r\n                    <DifficultyButton onClick={this.setHard} disabled={!this.state.isEasy}>Hard</DifficultyButton>\r\n                </div>\r\n                <OptionText>Game Mode</OptionText>\r\n                <div>\r\n                    <DifficultyButton onClick={this.setClassic} disabled={this.state.isClassic}>Classic</DifficultyButton>\r\n                    <DifficultyButton onClick={this.setTimed} disabled={!this.state.isClassic}>Time Attack</DifficultyButton>\r\n                </div>\r\n                <WarningText>{warning}</WarningText>\r\n                <div>\r\n                    <ConfirmButton onClick={this.apply}>Apply</ConfirmButton>\r\n                    <CancelButton onClick={this.close}>Cancel</CancelButton>\r\n                </div>\r\n            </Dialog>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        classic : state.classic,\r\n        easy : state.easy\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Settings);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nconst Border = styled.div`\r\n    margin-bottom: 0.5em;\r\n    margin-top: -1em;\r\n    position: relative;\r\n    height: 5px;\r\n    width: 100%;\r\n    border-bottom: 2px solid rgb(49, 49, 49);\r\n`;\r\n\r\nconst Bar = styled.div.attrs(props => ({\r\n    percent: props.percent\r\n}))`\r\n    background: ${props => {\r\n        let r;\r\n        let g;\r\n        if (props.percent > 50) {\r\n            r = props.percent * -3 + 300;\r\n            g = 150;\r\n        } else {\r\n            g = props.percent * 3;\r\n            r = 150;\r\n        }\r\n        return \"rgb(\" + r + \",\" + g + \",0)\";\r\n    }};\r\n    height: 100%;\r\n    border-radius: inherit;\r\n    transition: width .1s linear;\r\n    width: ${props => props.percent}%;\r\n`;\r\n\r\nclass ProgressBar extends React.Component {\r\n    render() {\r\n        if (this.props.classic) {\r\n            return null;\r\n        } else {\r\n            return(\r\n                <Border>\r\n                    <Bar  percent={this.props.percentage}></Bar>\r\n                </Border>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        classic : state.classic\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ProgressBar);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { reset } from '../../actions.js';\r\nimport Item from '../item/item';\r\nimport MysteryIcon from '../mysteryIcon/mysteryIcon';\r\nimport Settings from '../settings/settings.js';\r\nimport ProgressBar from '../progressBar/progressBar.js';\r\nimport items from '../../data/items.json';\r\nimport styled, { keyframes } from 'styled-components';\r\n\r\nconst Page = styled.div`\r\n    text-align: center;\r\n`;\r\n\r\nconst GameMain = styled.div`\r\n    position: relative;\r\n    margin: 0 auto;\r\n    width: 60%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    border: 2px rgb(49, 49, 49) solid;\r\n    padding: 1em 0em 1em 0em;\r\n`;\r\n\r\nconst QuizItem = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nconst Row = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nconst PopUpTextKeyFrames = keyframes`\r\n    0% {\r\n        opacity: 1;\r\n        top: -2.5em;\r\n        z-index: 1;\r\n    }\r\n    100% {\r\n        opacity 0;\r\n        top: -4.5em;\r\n        z-index: 1;\r\n    }\r\n`;\r\nconst PopUpText = styled.div`\r\n    opacity: 0;\r\n    position: relative;\r\n    color : #CC1400;\r\n    font-size : 3em;\r\n    font-weight: bold;\r\n    margin : auto;\r\n    top: -2.5em;\r\n    text-align: center;\r\n    z-index: -1;\r\n    &.play-animation {\r\n        animation: ${PopUpTextKeyFrames} 1s ease-in-out 0s 1;\r\n    }\r\n`;\r\n\r\nconst StatText = styled.div`\r\n    font-size: 1.5em;\r\n`;\r\n\r\nconst dialogKeyFrame = keyframes`\r\n    0% {\r\n        opacity: 0;\r\n        top: 0%;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n        top: 20%;\r\n    }\r\n`;\r\n\r\nconst Dialog = styled.div`\r\n    width: 30%;\r\n    position: fixed;\r\n    display: block;\r\n    text-align: center;\r\n    margin: auto;\r\n    top: 20%;\r\n    left: 0;\r\n    right: 0;\r\n    padding: 0.25em 0em 1em 0em;\r\n    background-color: #222222;\r\n    border: 2px rgb(49, 49, 49) groove;\r\n    animation: ${dialogKeyFrame} 0.5s ease-in-out 0s 1;\r\n`;\r\n\r\nconst LargeText = styled.div`\r\n    font-size: 2em;\r\n    margin-bottom: 0.75em;\r\n`;\r\n\r\nconst RestartButton = styled.button`\r\n    background-color: #333333;\r\n    border: 1px solid #444444;\r\n    text-align: center;\r\n    padding: 6px 22px;\r\n    color: #dddddd;\r\n    font-size: 1.5em;\r\n    margin-bottom: 0.25em;\r\n`;\r\n\r\nconst OptionButton = styled.button.attrs(props => ({\r\n    url : props.url\r\n}))`\r\n    position: absolute;\r\n    bottom: 5px;\r\n    right: 5px;\r\n    background-color: inherit;\r\n    border: none;\r\n    text-align: center;\r\n    width: 30px;\r\n    height: 30px;\r\n    color: #aaaaaa;\r\n    font-size: 1em;\r\n    background-image: url(${props => props.url});\r\n    background-size: 30px 30px;\r\n    padding: 0;\r\n`;\r\n\r\nconst initialTimeEasy = 10000;\r\nconst initialTimeHard = 6500;\r\n\r\nconst streakNames = [\"Wrong Answer\", \"Correct!\", \"Double Answer!\", \"Answering Spree!\", \"Dominating!\", \"Mega Answer!\", \"Unstoppable!\", \"Wicked Sick!\", \"Monster Answer!\", \"Godlike!\", \"Beyond Godlike!\"];\r\nconst timeSlow = [\"Close Call!\", \"Close One!\", \"Barely!\"];\r\nconst timeNormal = [\"Nice!\", \"Correct!\", \"Well Done!\", \"Great!\"];\r\nconst timeFast = [\"Speedy!\", \"With Alacrity!\", \"So Fast!\", \"Swift!\"];\r\nclass Game extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.popupRef = React.createRef();\r\n        \r\n        // First time initialization\r\n        //Get list of items to quiz\r\n        let itemsWithRecipe = [];\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (items[i].components !== null) {\r\n                itemsWithRecipe.push(items[i]);\r\n            }\r\n        }\r\n        // Shuffle items\r\n        for (let i = itemsWithRecipe.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            let tmp = itemsWithRecipe[i];\r\n            itemsWithRecipe[i] = itemsWithRecipe[j];\r\n            itemsWithRecipe[j] = tmp;\r\n        }\r\n\r\n        // Initialize list of items that are components\r\n        let materialIDs = [];\r\n        for (let i = 0; i < itemsWithRecipe.length; i++) {\r\n            let tmp = itemsWithRecipe[i].components;\r\n            for (let j = 0; j < tmp.length; j++) {\r\n                if (!materialIDs.includes(tmp[j])) {\r\n                    materialIDs.push(tmp[j]);\r\n                }\r\n            }\r\n        }\r\n        let time = initialTimeHard;\r\n        if (this.props.easy) {\r\n            time = initialTimeEasy\r\n        }\r\n        this.state = {\r\n            itemsToQuiz: itemsWithRecipe,\r\n            current: 0,\r\n            //currentRecipe : recipe,\r\n            //currentQuiz : components,\r\n            materials: materialIDs,\r\n            frozen: false,\r\n            streak : 0,\r\n            score : 0,\r\n            tries : 3,\r\n            timeLeft: time,\r\n            win : false,\r\n            settings: false,\r\n            timer: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nextQuiz();\r\n    }\r\n\r\n    // Gets the item's object for a given id\r\n    getItemData = (itemID) => {\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (items[i].id === itemID) {\r\n                return items[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Generates the random items to fill the rest of the quiz items with wrong items\r\n    // Tries to generate items that are close in price to the real components\r\n    generateRandomItems = (recipe) => {\r\n        let curr = this.state.current;\r\n        // Get only items that are components (items that build into other items), exclude items included in recipe\r\n        let filtered = items.filter((item) => {\r\n            for (let i = 0; i < recipe.length; i++) {\r\n                if (recipe[i] === item.id || this.state.itemsToQuiz[curr].id === item.id) {\r\n                    return false;\r\n                }\r\n            }\r\n            if (this.state.materials.includes(item.id)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n\r\n        // Add exception for power treads (remove band of elvenskin and robe of magi)\r\n        if (this.state.itemsToQuiz[curr].id === \"power_treads\") {\r\n            for (let i = 0; i < filtered.length; i++) {\r\n                if (filtered[i].id === \"robe\" || filtered[i].id === \"boots_of_elves\") {\r\n                    filtered.splice(i, 1);\r\n                    i--;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Get the costs of all items in the current recipe (including recipe cost)\r\n        let componentCosts = [];\r\n        for (let i = 0; i < recipe.length; i++) {\r\n            if (recipe[i] !== \"recipe\") {\r\n                componentCosts.push(this.getItemData(recipe[i]).cost);\r\n            }\r\n        }\r\n        let recipeCost = this.state.itemsToQuiz[curr].RecipeCost;\r\n        if (recipeCost !== 0) {\r\n            componentCosts.push(recipeCost);\r\n        }\r\n\r\n        // Get items only within +/-200 of any item in the recipe\r\n        let costFiltered = filtered.filter((item) => {\r\n            for (let i = 0; i < recipe.length; i++) {\r\n                if (item.cost <= (componentCosts[i] + 200) && item.cost >= (componentCosts[i] - 200)) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        });\r\n\r\n        // Populate randItems with items close in cost to recipe items\r\n        let randItems = [];\r\n        let numRand = 8;\r\n        if (recipe.includes(\"recipe\")) {\r\n            numRand -= recipe.length - 1;\r\n        } else {\r\n            numRand -= recipe.length;\r\n        }\r\n        if (costFiltered.length <= numRand) {\r\n            // Okay to add repeats if not enough valid items\r\n            randItems = costFiltered;\r\n            for (let i = 0; i < numRand - randItems.length; i++) {\r\n                let rand = Math.floor(Math.random() * costFiltered.length);\r\n                randItems.push(costFiltered[rand]);\r\n            }\r\n        } else {\r\n            // Try not to add repeats if enough valid items\r\n            let alreadyPicked = []\r\n            for (let i = 0; i < numRand; i++) {\r\n                let rand;\r\n                do {\r\n                    rand = Math.floor(Math.random() * costFiltered.length);\r\n                }  while (alreadyPicked.includes(rand));\r\n                randItems.push(costFiltered[rand]);\r\n                alreadyPicked.push(rand);\r\n            }\r\n        }\r\n        \r\n        return randItems;\r\n        \r\n    }\r\n\r\n    // Generates all the item ID's for the current quiz (fake and real)\r\n    getQuizComponents = (recipe) => {\r\n        let components = [];\r\n        for (let i = 0; i < recipe.length; i++) {\r\n            if (recipe[i] !== \"recipe\"){\r\n                let component = this.getItemData(recipe[i]);\r\n                if (component === null) {\r\n                    console.log(\"null item! id: \" + recipe[i]);\r\n                }\r\n                components.push(component);\r\n            }\r\n        }\r\n        return components.concat(this.generateRandomItems(recipe));\r\n    }\r\n\r\n    // Loads the next item to quiz, or the win state if there is no more items\r\n    nextQuiz = () => {\r\n        if (this.state.current < this.state.itemsToQuiz.length) {\r\n            let recipe = this.state.itemsToQuiz[this.state.current].components;\r\n            let components = this.getQuizComponents(recipe);\r\n            // Shuffle the components\r\n            for (let i = components.length - 1; i > 0; i--) {\r\n                let j = Math.floor(Math.random() * (i + 1));\r\n                let tmp = components[i];\r\n                components[i] = components[j];\r\n                components[j] = tmp;\r\n            }\r\n            this.setState({\r\n                currentRecipe : recipe,\r\n                currentQuiz : components\r\n            });\r\n            if (!this.props.classic) {\r\n                this.startTimer();\r\n            }\r\n        } else {\r\n            this.setState({win : true});\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.classic !== this.props.classic || prevProps.easy !== this.props.easy) {\r\n            this.reset();\r\n        } else if (!this.state.frozen) {\r\n            // Check which items are selected\r\n            let recipe = this.state.currentRecipe.slice();\r\n            let selected = [];\r\n            for (let i = 0; i < this.props.selected.length; i++) {\r\n                if (this.props.selected[i] === 8) {\r\n                    selected.push(\"recipe\");\r\n                } else {\r\n                    selected.push(this.state.currentQuiz[this.props.selected[i]].id);\r\n                }\r\n                \r\n            }\r\n\r\n            // Only check for correctness if all slots are filled\r\n            if (recipe.length === selected.length) {\r\n                // Check for correctness\r\n                recipe.sort();\r\n                selected.sort();\r\n                let correct = true;\r\n                for (let i = 0; i < recipe.length; i++) {\r\n                    if(recipe[i] !== selected[i]) {\r\n                        correct = false;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // Play the popup animation\r\n                const popup = this.popupRef.current;\r\n                popup.classList.add('play-animation');\r\n\r\n                if (correct) {\r\n                    let currentStreak = this.state.streak;\r\n                    let currentScore = this.state.score;\r\n                    if (!this.props.classic) {\r\n                        clearInterval(this.state.timer);\r\n                        currentScore += Math.max(this.state.timeLeft / 20);\r\n                    } else {\r\n                        currentScore += currentStreak * 30 + 200;\r\n                    }\r\n                    currentStreak += 1;\r\n                    this.setState({\r\n                        frozen : true, \r\n                        streak : currentStreak,\r\n                        score : currentScore\r\n                    });\r\n                    // Wait for pop up text animation to end before loading next quiz\r\n                    setTimeout(() => {\r\n                        popup.classList.remove('play-animation');\r\n                        this.props.dispatch(reset());\r\n                        this.setState({\r\n                            frozen : false,\r\n                            current : this.state.current + 1\r\n                        });\r\n                        this.nextQuiz();\r\n                        \r\n                    }, 1000);\r\n                } else {\r\n                    let currentTries = this.state.tries;\r\n                    if (this.props.classic) {\r\n                        currentTries -= 1;\r\n                        if (currentTries === 0) {\r\n                            this.setState({\r\n                                streak : 0,\r\n                                frozen : true\r\n                            });\r\n    \r\n                            // Wait for pop up text animation to end before loading game over screen\r\n                            setTimeout(() => {\r\n                                popup.classList.remove('play-animation');\r\n                                this.setState({\r\n                                    tries : currentTries\r\n                                });\r\n                            }, 1000);\r\n                        } else {\r\n                            this.setState({\r\n                                frozen : true, \r\n                                streak : 0,\r\n                                tries : currentTries\r\n                            });\r\n    \r\n                            // Wait for pop up text animation to end before loading next quiz\r\n                            setTimeout(() => {\r\n                                popup.classList.remove('play-animation');\r\n                                this.props.dispatch(reset());\r\n                                this.setState({frozen : false});\r\n                            }, 1000)\r\n                        }\r\n                    } else {\r\n                        this.setState({\r\n                            frozen : true, \r\n                            streak : 0,\r\n                            tries : currentTries\r\n                        });\r\n\r\n                        // Wait for pop up text animation to end before loading next quiz\r\n                        setTimeout(() => {\r\n                            if (this.state.timeLeft > 0) {\r\n                                popup.classList.remove('play-animation');\r\n                                this.props.dispatch(reset());\r\n                                this.setState({frozen : false});\r\n                            } else {\r\n                                popup.classList.remove('play-animation');\r\n                            }\r\n                        }, 1000)\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n    // Gets the current streak text\r\n    getScorePopup = () => {\r\n        let text;\r\n        let amount;\r\n        if (this.props.classic) {\r\n            amount = (this.state.streak > 0) ? this.state.streak * 30 + 170 : 0;\r\n            // Just play the very last streak name for any streaks higher than it\r\n            if (this.state.streak < streakNames.length) {\r\n                text = streakNames[this.state.streak];\r\n            } else {\r\n                text = streakNames[streakNames.length - 1];\r\n            }\r\n            return (\r\n                <div>\r\n                    <div>\r\n                        {text}\r\n                    </div>\r\n                    <div>\r\n                        {this.state.streak > 0 ? \"+\" + amount : \" \"}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            amount = Math.max(this.state.timeLeft / 20);\r\n            if (this.state.streak === 0) {\r\n                text = \"Wrong Answer!\";\r\n            } else {\r\n                let maxTime = initialTimeHard;\r\n                if (this.props.easy) {\r\n                    maxTime = initialTimeEasy;\r\n                }\r\n                if (this.state.timeLeft / maxTime <= 0.3) {\r\n                    text = timeSlow[Math.floor(Math.random() * timeSlow.length)];\r\n                } else if (this.state.timeLeft / maxTime > 0.3 && this.state.timeLeft / maxTime < 0.8) {\r\n                    text = timeNormal[Math.floor(Math.random() * timeNormal.length)];\r\n                } else {\r\n                    text = timeFast[Math.floor(Math.random() * timeFast.length)];\r\n                }\r\n            }\r\n            return (\r\n                <div>\r\n                    <div>\r\n                        {text}\r\n                    </div>\r\n                    <div>\r\n                        {this.state.streak !== 0 ? \"+\" + amount : \" \"}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        \r\n    }\r\n\r\n    // Resets the game stat back to the start and also reshuffles the item quiz order\r\n    reset = () => {\r\n        let quiz = this.state.itemsToQuiz.slice();\r\n        // Reshuffling the quiz order\r\n        for (let i = quiz.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            let tmp = quiz[i];\r\n            quiz[i] = quiz[j];\r\n            quiz[j] = tmp;\r\n        }\r\n\r\n        let recipe = quiz[0].components;\r\n        this.setState({current : 0});\r\n        let components = this.getQuizComponents(recipe);\r\n        // Shuffle the components\r\n        for (let i = components.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            let tmp = components[i];\r\n            components[i] = components[j];\r\n            components[j] = tmp;\r\n        }\r\n        this.props.dispatch(reset());\r\n        this.setState({\r\n            itemsToQuiz: quiz,\r\n            currentRecipe : recipe,\r\n            currentQuiz : components,\r\n            streak : 0,\r\n            score : 0,\r\n            tries : 3,\r\n            win : false,\r\n            frozen: false\r\n        });\r\n        if (!this.props.classic) {\r\n            this.startTimer();\r\n        }\r\n    }\r\n\r\n    openSettings = () => {\r\n        this.setState({settings : true});\r\n        if (!this.props.classic) {\r\n            clearInterval(this.state.timer);\r\n        }\r\n    }\r\n\r\n    handleSettings = (apply) => {\r\n        this.setState({settings : false});\r\n        if (!apply && !this.props.classic) {\r\n            let time = setInterval(() => {\r\n                let newTime = this.state.timeLeft - 100;\r\n                if (newTime <= 0) {\r\n                    clearInterval(this.state.timer);\r\n                    this.setState({frozen : true});\r\n                }\r\n                this.setState({timeLeft : newTime});\r\n            }, 100);\r\n            this.setState({timer : time});\r\n        }\r\n    }\r\n\r\n    startTimer = () => {\r\n        if (this.props.easy) {\r\n            this.setState({timeLeft : initialTimeEasy});\r\n        } else {\r\n            this.setState({timeLeft : initialTimeHard});\r\n        }\r\n        let time = setInterval(() => {\r\n            let newTime = this.state.timeLeft - 100;\r\n            if (newTime <= 0) {\r\n                clearInterval(this.state.timer);\r\n                this.setState({frozen : true});\r\n            }\r\n            this.setState({timeLeft : newTime});\r\n        }, 100);\r\n        this.setState({timer: time});\r\n    }\r\n\r\n    // Generates the components for the row of mystery icon symbols that will update as items are selected\r\n    createMysteryIcons = () => {\r\n        let selected = [];\r\n        let indicies = [];\r\n        for (let i = 0; i < this.props.selected.length; i++) {\r\n            if (this.props.selected[i] === 8) {\r\n                selected.push(\"recipe\");\r\n            } else {\r\n                selected.push(this.state.currentQuiz[this.props.selected[i]].id);\r\n                indicies.push(this.props.selected[i]);\r\n            }\r\n        }\r\n        let numIcons = this.state.itemsToQuiz[this.state.current].components.length;\r\n        let icons = [];\r\n        for (let i = 0; i < selected.length; i++) {\r\n            icons.push(<MysteryIcon key={i} id={selected[i]} index={indicies[i]}></MysteryIcon>);\r\n        }\r\n        for (let i = 0; i < numIcons - selected.length; i++) {\r\n            icons.push(<MysteryIcon key={i + selected.length} id={\"unknown\"} index={-1}></MysteryIcon>);\r\n        }\r\n        return icons;\r\n    }\r\n\r\n    // Generates the JSX for the quiz components\r\n    createQuizComponents = () => {\r\n        let quizItems = []\r\n        for (let i = 0; i < this.state.currentQuiz.length; i++) {\r\n            quizItems.push(<Item key={i} locked={this.state.frozen} id={this.state.currentQuiz[i].id} index={i} clickable={true}></Item>);\r\n        }\r\n        return quizItems;\r\n    }\r\n\r\n    render() {\r\n        let gg = <div></div>\r\n        let game = <div></div>\r\n        let footer = <div></div>\r\n        let maxTime = initialTimeHard;\r\n        if (this.props.easy) {\r\n            maxTime = initialTimeEasy;\r\n        }\r\n        if ((this.state.tries <= 0 && this.props.classic) || (this.state.timeLeft <= 0 && !this.props.classic)) {\r\n            gg = <Dialog>\r\n                <LargeText>Game Over</LargeText>\r\n                <LargeText>Final Score: {this.state.score}</LargeText>\r\n                <RestartButton onClick={this.reset}>Restart</RestartButton>\r\n            </Dialog>\r\n        }\r\n        if (this.state.win) {\r\n            gg = <Dialog>\r\n                <LargeText>Game Complete!</LargeText>\r\n                <LargeText>Final Score: {this.state.score}</LargeText>\r\n                <RestartButton onClick={this.reset}>Replay?</RestartButton>\r\n            </Dialog>\r\n        }\r\n        \r\n        if (this.props.classic) {\r\n            footer = <div>\r\n                <StatText>\r\n                    Guesses Left: {this.state.tries}\r\n                </StatText>\r\n                <StatText>\r\n                    Score: {this.state.score}\r\n                </StatText>\r\n            </div>\r\n            \r\n        } else {\r\n            footer = <div>\r\n                <StatText>\r\n                    Score: {this.state.score}\r\n                </StatText>\r\n            </div>\r\n        }\r\n        //TODO: Settings should cover the entire game board to prevent cheating in time attack\r\n        if (this.state.settings) {\r\n            game = \r\n            <GameMain>\r\n                <Settings onClose={this.handleSettings}></Settings>\r\n            </GameMain>\r\n        } else {\r\n            game = \r\n            <GameMain>\r\n                <ProgressBar percentage={100 * this.state.timeLeft / maxTime}></ProgressBar>\r\n                <QuizItem>\r\n                    <Item id={this.state.itemsToQuiz[this.state.current].id} locked={this.state.frozen} clickable={false}></Item>\r\n                </QuizItem>\r\n                <Row>\r\n                    {this.createMysteryIcons()}\r\n                </Row>\r\n                <Row>\r\n                    {(this.state.currentQuiz) ? this.createQuizComponents() : \"\"}\r\n                    <Item id=\"recipe\" locked={this.state.frozen} index={8} clickable={true}></Item>\r\n                </Row>\r\n                {footer}\r\n                <OptionButton url={process.env.PUBLIC_URL + '/images/settings.png'} onClick={this.openSettings} disabled={this.state.options}></OptionButton>\r\n            </GameMain>\r\n        }\r\n        return(\r\n            <Page>\r\n                <h1>Shopkeeper's Quiz</h1>\r\n                {game}\r\n                <PopUpText ref={this.popupRef}>\r\n                    {this.getScorePopup()}\r\n                </PopUpText>\r\n                {gg}\r\n            </Page>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        selected : state.selected,\r\n        easy : state.easy,\r\n        classic : state.classic\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Game);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport Game from './components/game/game.js';\nimport produce from 'immer';\n\n\nconst initialState = {\n    selected: [],\n    easy: true,\n    classic: true\n};\n\nfunction reducer(state = initialState, action) {\n    switch(action.type) {\n        case 'SELECT':\n            return produce(state, draft => {\n                draft.selected.push(action.value);\n            })\n        case 'DESELECT':\n            return produce(state, draft => {\n                draft.selected.splice(draft.selected.indexOf(action.value), 1);\n            })\n        case 'RESET':\n            return {\n                selected: [],\n                easy: state.easy,\n                classic: state.classic\n            }\n        case 'APPLY_SETTINGS':\n            return {\n                selected: [],\n                easy: action.value.easy,\n                classic: action.value.classic\n            }\n        case 'SET_DIFFICULTY':\n            return {\n                selected: state.selected,\n                easy: action.value,\n                classic: state.classic\n            }\n        case \"SET_GAME_MODE\":\n            return {\n                selected: state.selected,\n                easy: state.easy,\n                classic: action.value\n            }\n        default:\n            return state;\n    }\n}\n\nconst store = createStore(reducer);\n\nconst App = () => (\n    <Provider store={store}>\n        <Game></Game>\n    </Provider>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}