{"version":3,"sources":["actions.js","components/itemHover/itemHover.js","components/item/item.js","components/mysteryIcon/mysteryIcon.js","components/game/game.js","index.js"],"names":["deselect","value","type","setDifficulty","MainBody","styled","div","Header","HeaderText","Name","Price","Symbol","img","Ability","AbilityHeader","AbilityHeaderCosts","span","AbilityHeaderStat","AbilityText","Attributes","AttributeNumber","Lore","ItemHover","renderUpgrade","items","props","index","upgrade","name","cd","alt","src","mc","desc","renderToggle","toggle","renderActive","active","renderPassive","passive","i","length","push","key","renderUse","use","renderAttributes","attrib","className","header","footer","this","easy","id","dname","cost","lore","React","Component","connect","state","wrapperKeyFrame","keyframes","Wrapper","Icon","attrs","url","FadedIcon","ItemInfo","Item","getItemIndex","selectItem","locked","clickable","selected","includes","dispatch","wrapperRef","createRef","prevProps","prevState","snapshot","wrapper","current","classList","add","setTimeout","remove","imgURL","hover","onClick","ref","MysteryIcon","deselectItem","Page","GameMain","QuizItem","Row","PopUpTextKeyFrames","PopUpText","StatText","endDialogKeyFrame","EndDialog","LargeText","RestartButton","button","DifficultyButton","streakNames","Game","getItemData","itemID","generateRandomItems","recipe","curr","itemsToQuiz","filtered","filter","item","materials","splice","componentCosts","recipeCost","RecipeCost","costFiltered","randItems","numRand","rand","Math","floor","random","alreadyPicked","getQuizComponents","components","component","console","log","concat","createQuizComponents","quizItems","currentQuiz","frozen","createMysteryIcons","indicies","numIcons","icons","nextQuiz","j","k","tmp","setState","currentRecipe","win","getStreak","text","amount","streak","reset","quiz","slice","score","tries","setEasy","setHard","popupRef","itemsWithRecipe","materialIDs","sort","correct","popup","currentStreak","currentScore","currentTries","gg","disabled","initialState","store","createStore","action","produce","draft","indexOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d4dcb0d5.chunk.js","sourcesContent":["export function select(value) {\r\n    return {\r\n        type : \"SELECT\",\r\n        value\r\n    };\r\n}\r\n\r\nexport function deselect(value) {\r\n    return {\r\n        type : \"DESELECT\",\r\n        value\r\n    };\r\n}\r\n\r\nexport function reset() {\r\n    return {\r\n        type : \"RESET\"\r\n    };\r\n}\r\n\r\nexport function setDifficulty(value) {\r\n    return {\r\n        type : \"SET_DIFFICULTY\",\r\n        value\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport items from '../../data/items.json';\r\nimport styled from 'styled-components';\r\n\r\nconst MainBody = styled.div`\r\n    border: 2px rgb(70, 70, 70) groove;\r\n    background-color: #333333;\r\n    color: #cccccc;\r\n    width: 310px;\r\n    text-align: left;\r\n`;\r\n\r\nconst Header = styled.div`\r\n    display: flex;\r\n    padding: 5px 5px 0px 5px;\r\n`;\r\n\r\nconst HeaderText = styled.div`\r\n    display: flex;\r\n    margin-left: 10px;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst Name = styled.div`\r\n    color: white;\r\n    font-size: 14pt;\r\n    font-weight: bold;\r\n`;\r\n\r\nconst Price = styled.div`\r\n    color: gold;\r\n    display:flex;\r\n`;\r\n\r\nconst Symbol = styled.img`\r\n    margin: auto 5px auto 0px;\r\n    max-height: 1em;\r\n`;\r\n\r\nconst Ability = styled.div`\r\n    background-color:#212b3d;\r\n    margin-top: 1em;\r\n`;\r\n\r\nconst AbilityHeader = styled.div`\r\n    background-color:rgb(64, 76, 99);\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 5px;\r\n    font-weight: bold;\r\n`;\r\n\r\nconst AbilityHeaderCosts = styled.span`\r\n    display: flex;\r\n`;\r\n\r\nconst AbilityHeaderStat = styled.span`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin: auto 0;\r\n    margin-left: 10px;\r\n`;\r\n\r\nconst AbilityText = styled.div`\r\n    padding: 5px;\r\n    white-space: pre-wrap;\r\n`;\r\n\r\nconst Attributes = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 5px;\r\n    margin-bottom: -0.5em;\r\n`;\r\n\r\nconst AttributeNumber = styled.span`\r\n    color:#efefef\r\n`;\r\n\r\nconst Lore = styled.div`\r\n    padding: 5px;\r\n    font-style: italic;\r\n    color: #aaaaaa\r\n`;\r\nclass ItemHover extends React.Component {\r\n\r\n    renderUpgrade = () => {\r\n        if (\"upgrade\" in items[this.props.index]) {\r\n            return ( \r\n                <Ability>\r\n                    <AbilityHeader>\r\n                        Upgrade: {items[this.props.index].upgrade[0].name}\r\n                        <AbilityHeaderCosts>\r\n                            {items[this.props.index].cd !== false && \r\n                                <AbilityHeaderStat>\r\n                                    <Symbol alt=\"\" src=\"http://cdn.dota2.com/apps/dota2/images/tooltips/cooldown.png\" />\r\n                                    {items[this.props.index].cd}\r\n                                </AbilityHeaderStat>\r\n                            }\r\n                            {items[this.props.index].mc !== false && \r\n                                <AbilityHeaderStat>\r\n                                    <Symbol alt=\"\" src=\"http://cdn.dota2.com/apps/dota2/images/tooltips/mana.png\" />\r\n                                    {items[this.props.index].mc}\r\n                                </AbilityHeaderStat>\r\n                            }\r\n                        </AbilityHeaderCosts>\r\n                    </AbilityHeader>\r\n                    <AbilityText>{items[this.props.index].upgrade[0].desc}</AbilityText>\r\n                </Ability>\r\n            );\r\n        }\r\n        return;\r\n    }\r\n\r\n    renderToggle = () => {\r\n        if (\"toggle\" in items[this.props.index]) {\r\n            return (\r\n                <Ability>\r\n                    <AbilityHeader>\r\n                        Toggle: {items[this.props.index].toggle[0].name}\r\n                        <AbilityHeaderCosts>\r\n                            {items[this.props.index].cd !== false && \r\n                                <AbilityHeaderStat>\r\n                                    <Symbol alt=\"\" src=\"http://cdn.dota2.com/apps/dota2/images/tooltips/cooldown.png\" />\r\n                                    {items[this.props.index].cd}\r\n                                </AbilityHeaderStat>\r\n                            }\r\n                            {items[this.props.index].mc !== false && \r\n                                <AbilityHeaderStat>\r\n                                    <Symbol alt=\"\" src=\"http://cdn.dota2.com/apps/dota2/images/tooltips/mana.png\" />\r\n                                    {items[this.props.index].mc}\r\n                                </AbilityHeaderStat>\r\n                            }\r\n                        </AbilityHeaderCosts>\r\n                        \r\n                    </AbilityHeader>\r\n                    <AbilityText>{items[this.props.index].toggle[0].desc}</AbilityText>\r\n                </Ability>\r\n            );\r\n        }\r\n        return;\r\n    }\r\n\r\n    renderActive = () => {\r\n        if (\"active\" in items[this.props.index]) {\r\n            return (\r\n                <Ability>\r\n                    <AbilityHeader>\r\n                        Active: {items[this.props.index].active[0].name}\r\n                        <AbilityHeaderCosts>\r\n                            {items[this.props.index].cd !== false && \r\n                                <AbilityHeaderStat>\r\n                                    <Symbol alt=\"\" src=\"http://cdn.dota2.com/apps/dota2/images/tooltips/cooldown.png\" />\r\n                                    {items[this.props.index].cd}\r\n                                </AbilityHeaderStat>\r\n                            }\r\n                            {items[this.props.index].mc !== false && \r\n                                <AbilityHeaderStat>\r\n                                    <Symbol alt=\"\" src=\"http://cdn.dota2.com/apps/dota2/images/tooltips/mana.png\" />\r\n                                    {items[this.props.index].mc}\r\n                                </AbilityHeaderStat>\r\n                            }\r\n                        </AbilityHeaderCosts>\r\n                    </AbilityHeader>\r\n                    <AbilityText>{items[this.props.index].active[0].desc}</AbilityText>\r\n                </Ability>\r\n            );\r\n        }\r\n        return;\r\n    }\r\n\r\n    renderPassive = () => {\r\n        let passive = [];\r\n        if (\"passive\" in items[this.props.index]) {\r\n            for (let i = 0; i < items[this.props.index].passive.length; i++) {\r\n                passive.push(\r\n                    <Ability key={i}>\r\n                        <AbilityHeader>\r\n                            Passive: {items[this.props.index].passive[i].name}\r\n                        </AbilityHeader>\r\n                        <AbilityText>{items[this.props.index].passive[i].desc}</AbilityText>\r\n                    </Ability>\r\n                );\r\n            }\r\n        }\r\n        return passive;\r\n    }\r\n\r\n    renderUse = () => {\r\n        if (\"use\" in items[this.props.index]) {\r\n            return (\r\n                <Ability>\r\n                    <AbilityHeader>\r\n                        Use: {items[this.props.index].use[0].name}\r\n                        <AbilityHeaderCosts>\r\n                            {items[this.props.index].cd !== false && \r\n                                <AbilityHeaderStat>\r\n                                    <Symbol alt=\"\" src=\"http://cdn.dota2.com/apps/dota2/images/tooltips/cooldown.png\" />\r\n                                    {items[this.props.index].cd}\r\n                                </AbilityHeaderStat>\r\n                            }\r\n                            {items[this.props.index].mc !== false && \r\n                                <AbilityHeaderStat>\r\n                                    <Symbol alt=\"\" src=\"http://cdn.dota2.com/apps/dota2/images/tooltips/mana.png\" />\r\n                                    {items[this.props.index].mc}\r\n                                </AbilityHeaderStat>\r\n                            }\r\n                        </AbilityHeaderCosts>\r\n                    </AbilityHeader>\r\n                    <AbilityText>{items[this.props.index].use[0].desc}</AbilityText>\r\n                </Ability>\r\n            );\r\n        }\r\n        return;\r\n    }\r\n\r\n    renderAttributes = () => {\r\n        let attrib = [];\r\n        for (let i = 0; i < items[this.props.index].attrib.length; i++) {\r\n            attrib.push(\r\n                <span key={i} className=\"itemAttribText\">\r\n                    {items[this.props.index].attrib[i].header}\r\n                    <AttributeNumber>\r\n                        {items[this.props.index].attrib[i].value + \" \"}\r\n                    </AttributeNumber>\r\n                    {items[this.props.index].attrib[i].footer}\r\n                </span>\r\n            )\r\n        }\r\n        return attrib;\r\n    }\r\n\r\n    render() {\r\n        if (this.props.index === -1) {\r\n            return (\r\n                <MainBody>\r\n                    <Header>\r\n                        <div>\r\n                            <img alt=\"\" src=\"http://cdn.dota2.com/apps/dota2/images/items/recipe_lg.png\" />\r\n                        </div>\r\n                        <HeaderText>\r\n                            <Name>Recipe</Name>\r\n                        </HeaderText>\r\n                    </Header>\r\n                </MainBody>\r\n            );\r\n        } else {\r\n            if (this.props.easy) {\r\n                return (\r\n                    <MainBody>\r\n                        <Header>\r\n                            <div>\r\n                                <img alt=\"\" src={\"http://cdn.dota2.com/apps/dota2/images/items/\" + items[this.props.index].id + \"_lg.png\"} />\r\n                            </div>\r\n                            <HeaderText>\r\n                                <Name>{items[this.props.index].dname}</Name>\r\n                                <Price>\r\n                                    <Symbol alt=\"\" src={\"http://cdn.dota2.com/apps/dota2/images/tooltips/gold.png\"} />\r\n                                    {items[this.props.index].cost}\r\n                                </Price>\r\n                            </HeaderText>\r\n                        </Header>\r\n                        <Attributes>\r\n                            {this.renderAttributes()}\r\n                        </Attributes>\r\n                        {this.renderUpgrade()}\r\n                        {this.renderToggle()}\r\n                        {this.renderActive()}\r\n                        {this.renderPassive()}\r\n                        {this.renderUse()}\r\n                        <Lore>\r\n                            {items[this.props.index].lore}\r\n                        </Lore>\r\n                    </MainBody>\r\n                );\r\n            } else {\r\n                return (\r\n                    <MainBody>\r\n                        <Header>\r\n                            <div>\r\n                                <img alt=\"\" src={\"http://cdn.dota2.com/apps/dota2/images/items/\" + items[this.props.index].id + \"_lg.png\"} />\r\n                            </div>\r\n                            <HeaderText>\r\n                                <Name>{items[this.props.index].dname}</Name>\r\n                            </HeaderText>\r\n                        </Header>\r\n                    </MainBody>\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        easy: state.easy\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(ItemHover);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport items from '../../data/items.json';\r\nimport ItemHover from '../itemHover/itemHover.js';\r\nimport { select, deselect} from '../../actions.js';\r\nimport styled , { keyframes } from 'styled-components';\r\n\r\nconst wrapperKeyFrame = keyframes`\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        opacity 1;\r\n    }\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n    margin: 1%;\r\n    border: 2px #343434 solid;\r\n    &.fade-in {\r\n        z-index: -1;\r\n        animation: ${wrapperKeyFrame} 0.3s ease-in-out 0s 1;\r\n    }\r\n`;\r\n\r\nconst Icon = styled.div.attrs(props => ({\r\n    url: props.url,\r\n}))`\r\n    background-size: cover;\r\n    width: 4.4vw;\r\n    height: 3.21vw;\r\n    background-image: url(${props => props.url});\r\n`;\r\n\r\nconst FadedIcon = styled.div.attrs(props => ({\r\n    url: props.url,\r\n}))`\r\n    background-size: cover;\r\n    width: 4.4vw;\r\n    height: 3.21vw;\r\n    filter: saturate(10%) opacity(50%);\r\n    background-image: url(${props => props.url});\r\n    z-index: 0;\r\n`;\r\n\r\nconst ItemInfo = styled.div`\r\n    display: none;\r\n    z-index: 1;\r\n    margin-top: 3px;\r\n    margin-left: -2px;\r\n    position: absolute;\r\n    pointer-events: none;\r\n    ${Wrapper}:hover & {\r\n        display: block;\r\n    }\r\n`;\r\n\r\nclass Item extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.wrapperRef = React.createRef();\r\n    }\r\n\r\n    getItemIndex = () => {\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (items[i].id === this.props.id) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    selectItem = () => {\r\n        if (this.props.locked !== true && this.props.clickable === true) {\r\n            if (this.props.selected.includes(this.props.index)) {\r\n                this.props.dispatch(deselect(this.props.index));\r\n            } else {\r\n                this.props.dispatch(select(this.props.index));\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.locked === true) {\r\n            const wrapper = this.wrapperRef.current;\r\n            wrapper.classList.add('fade-in');\r\n            setTimeout(() => {\r\n                wrapper.classList.remove('fade-in');\r\n            }, 300)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let imgURL, hover;\r\n        if (this.props.id === \"recipe\") {\r\n            imgURL = \"http://cdn.dota2.com/apps/dota2/images/items/recipe_lg.png\"\r\n            hover = <ItemHover index={-1}></ItemHover>\r\n        } else {\r\n            imgURL = \"http://cdn.dota2.com/apps/dota2/images/items/\" + this.props.id + \"_lg.png\"\r\n            hover = <ItemHover index={this.getItemIndex()}></ItemHover>\r\n        }\r\n        let div;\r\n        if (this.props.selected.includes(this.props.index)) {\r\n            div = <FadedIcon url={imgURL} onClick={this.selectItem}></FadedIcon>\r\n        } else {\r\n            div = <Icon url={imgURL} onClick={this.selectItem}></Icon>\r\n        }\r\n\r\n        return(\r\n            <Wrapper ref={this.wrapperRef}>\r\n                {div}\r\n                <ItemInfo>\r\n                    {hover}\r\n                </ItemInfo>\r\n            </Wrapper>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        selected : state.selected\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Item);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport items from '../../data/items.json';\r\nimport ItemHover from '../itemHover/itemHover.js';\r\nimport { deselect } from '../../actions.js';\r\nimport styled , { keyframes } from 'styled-components';\r\n\r\nconst wrapperKeyFrame = keyframes`\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        opacity 1;\r\n    }\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n    margin: 1%;\r\n    border: 2px #343434 solid;\r\n    &.fade-in {\r\n        z-index: -1;\r\n        animation: ${wrapperKeyFrame} 0.3s ease-in-out 0s 1;\r\n    }\r\n`;\r\n\r\nconst Icon = styled.div.attrs(props => ({\r\n    url: props.url,\r\n}))`\r\n    background-size: cover;\r\n    width: 4.4vw;\r\n    height: 3.21vw;\r\n    background-image: url(${props => props.url});\r\n`;\r\n\r\nconst ItemInfo = styled.div`\r\n    display: none;\r\n    z-index: 1;\r\n    margin-top: 3px;\r\n    margin-left: -2px;\r\n    pointer-events: none;\r\n    ${Wrapper}:hover & {\r\n        display: block;\r\n        position: absolute;\r\n    }\r\n`;\r\n\r\nclass MysteryIcon extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.wrapperRef = React.createRef();\r\n    }\r\n\r\n    getItemIndex = () => {\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (items[i].id === this.props.id) {\r\n                return i;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    deselectItem = () => {\r\n        this.props.dispatch(deselect(this.props.index));\r\n    }\r\n\r\n    componentDidMount() {\r\n        const wrapper = this.wrapperRef.current;\r\n        wrapper.classList.add('fade-in');\r\n        setTimeout(() => {\r\n            wrapper.classList.remove('fade-in');\r\n        }, 300)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if ((prevProps.id === 'unknown' && this.props.id !== 'unknown') || (this.props.id === 'unknown' && prevProps.id !== 'unknown')) {\r\n            const wrapper = this.wrapperRef.current;\r\n            wrapper.classList.add('fade-in');\r\n            setTimeout(() => {\r\n                wrapper.classList.remove('fade-in');\r\n            }, 300)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let imgURL, hover;\r\n        if (this.props.id === 'unknown') {\r\n            imgURL = \"http://cdn.dota2.com/apps/dota2/images/quiz/item-slot-unknown.png\"\r\n            hover = <div></div>;\r\n        } else if (this.props.id === \"recipe\") {\r\n            imgURL = \"http://cdn.dota2.com/apps/dota2/images/items/recipe_lg.png\"\r\n            hover = <ItemInfo>\r\n                        <ItemHover index={-1}></ItemHover>\r\n                    </ItemInfo>\r\n        } else {\r\n            imgURL = \"http://cdn.dota2.com/apps/dota2/images/items/\" + this.props.id + \"_lg.png\"\r\n            hover = <ItemInfo>\r\n                        <ItemHover index={this.getItemIndex()}></ItemHover>\r\n                    </ItemInfo>\r\n        }\r\n        return (\r\n            <Wrapper ref={this.wrapperRef}>\r\n                <Icon url={imgURL} onClick={this.deselectItem}></Icon>\r\n                {hover}\r\n            </Wrapper>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        selected : state.selected\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(MysteryIcon);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { reset, setDifficulty } from '../../actions.js';\r\nimport Item from '../item/item';\r\nimport MysteryIcon from '../mysteryIcon/mysteryIcon';\r\nimport items from '../../data/items.json';\r\nimport styled, { keyframes } from 'styled-components';\r\n\r\n\r\nconst Page = styled.div`\r\n    text-align: center;\r\n`;\r\n\r\nconst GameMain = styled.div`\r\n    margin: 0 auto;\r\n    width: 60%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    border: 2px rgb(49, 49, 49) solid;\r\n    padding: 1em;\r\n`;\r\n\r\nconst QuizItem = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nconst Row = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nconst PopUpTextKeyFrames = keyframes`\r\n    0% {\r\n        opacity: 1;\r\n        top: -2.5em;\r\n        z-index: 1;\r\n    }\r\n    100% {\r\n        opacity 0;\r\n        top: -4.5em;\r\n        z-index: 1;\r\n    }\r\n`;\r\nconst PopUpText = styled.div`\r\n    opacity: 0;\r\n    position: relative;\r\n    color : #CC1400;\r\n    font-size : 3em;\r\n    font-weight: bold;\r\n    margin : auto;\r\n    top: -2.5em;\r\n    text-align: center;\r\n    z-index: -1;\r\n    &.play-animation {\r\n        animation: ${PopUpTextKeyFrames} 1s ease-in-out 0s 1;\r\n    }\r\n`;\r\n\r\nconst StatText = styled.div`\r\n    font-size: 1.5em;\r\n`;\r\n\r\nconst endDialogKeyFrame = keyframes`\r\n    0% {\r\n        opacity: 0;\r\n        top: 0%;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n        top: 20%;\r\n    }\r\n`;\r\n\r\nconst EndDialog = styled.div`\r\n    width: 30%;\r\n    position: fixed;\r\n    display: block;\r\n    text-align: center;\r\n    margin: auto;\r\n    top: 20%;\r\n    left: 0;\r\n    right: 0;\r\n    padding: 2em;\r\n    background-color: #222222;\r\n    border: 2px rgb(49, 49, 49) groove;\r\n    animation: ${endDialogKeyFrame} 0.5s ease-in-out 0s 1;\r\n`;\r\n\r\nconst LargeText = styled.div`\r\n    font-size: 2em;\r\n    margin-bottom: 0.75em;\r\n`;\r\n\r\nconst RestartButton = styled.button`\r\n    background-color: #333333;\r\n    border: 1px solid #444444;\r\n    text-align: center;\r\n    padding: 6px 22px;\r\n    color: #dddddd;\r\n    font-size: 1.5em;\r\n    margin-bottom: 0.25em;\r\n`;\r\n\r\nconst DifficultyButton = styled.button`\r\n    background-color: #333333;\r\n    border: 1px solid #444444;\r\n    text-align: center;\r\n    padding: 6px 22px;\r\n    color: #dddddd;\r\n    font-size: 1.5em;\r\n    margin: 0em 1em 1em 1em;\r\n    &:disabled {\r\n        background-color: #222222;\r\n        color: #aaaaaa;\r\n        border: 1px solid #1a1a1a;\r\n    }\r\n`;\r\n\r\nconst streakNames = [\"Wrong Answer\", \"Correct!\", \"Double Answer!\", \"Answering Spree!\", \"Dominating!\", \"Mega Answer!\", \"Unstoppable!\", \"Wicked Sick!\", \"Monster Answer!\", \"Godlike!\", \"Beyond Godlike!\"]\r\nclass Game extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.popupRef = React.createRef();\r\n        \r\n        // First time initialization\r\n        //Get list of items to quiz\r\n        let itemsWithRecipe = [];\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (items[i].components !== null) {\r\n                itemsWithRecipe.push(items[i]);\r\n            }\r\n        }\r\n        // Shuffle items\r\n        for (let i = itemsWithRecipe.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            let tmp = itemsWithRecipe[i];\r\n            itemsWithRecipe[i] = itemsWithRecipe[j];\r\n            itemsWithRecipe[j] = tmp;\r\n        }\r\n\r\n        // Initialize list of items that are components\r\n        let materialIDs = [];\r\n        for (let i = 0; i < itemsWithRecipe.length; i++) {\r\n            let tmp = itemsWithRecipe[i].components;\r\n            for (let j = 0; j < tmp.length; j++) {\r\n                if (!materialIDs.includes(tmp[j])) {\r\n                    materialIDs.push(tmp[j]);\r\n                }\r\n            }\r\n        }\r\n\r\n        // First time initialization for the very first quiz item\r\n        // Should refactor this out so it can just be called in respective functions eventually (probably never)\r\n\r\n        let recipe = itemsWithRecipe[0].components;\r\n\r\n        // First add the list of real components\r\n        let components = [];\r\n        for (let i = 0; i < recipe.length; i++) {\r\n            if (recipe[i] !== \"recipe\"){\r\n                let component = this.getItemData(recipe[i]);\r\n                if (component === null) {\r\n                    console.log(\"null item! id: \" + recipe[i]);\r\n                }\r\n                components.push(component);\r\n            }\r\n        }\r\n\r\n        // Get items that are components (items that build into other items), exclude items included in recipe\r\n        let filtered = items.filter((item) => {\r\n            for (let i = 0; i < recipe.length; i++) {\r\n                if (recipe[i] === item.id) {\r\n                    return false;\r\n                }\r\n            }\r\n            if (materialIDs.includes(item.id)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n\r\n        //Add exception for Power Treads\r\n        if (itemsWithRecipe[0].id === \"power_treads\") {\r\n            for (let i = 0; i < filtered.length; i++) {\r\n                if (filtered[i].id === \"robe\" || filtered[i].id === \"boots_of_elves\") {\r\n                    filtered.splice(i, 1);\r\n                    i--;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Get the costs of all items in the current recipe (including recipe cost)\r\n        let componentCosts = [];\r\n        for (let i = 0; i < recipe.length; i++) {\r\n            if (recipe[i] !== \"recipe\") {\r\n                componentCosts.push(this.getItemData(recipe[i]).cost);\r\n            }\r\n        }\r\n        if (itemsWithRecipe[0].RecipeCost !== 0) {\r\n            componentCosts.push(itemsWithRecipe[0].RecipeCost);\r\n        }\r\n\r\n        // Get items only within +/-200 of any item in the recipe\r\n        let costFiltered = filtered.filter((item) => {\r\n            for (let i = 0; i < recipe.length; i++) {\r\n                if (item.cost <= (componentCosts[i] + 200) && item.cost >= (componentCosts[i] - 200)) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        });\r\n\r\n        // Populate randItems with items close in cost to recipe items\r\n        let randItems = [];\r\n        let numRand = 8;\r\n        if (recipe.includes(\"recipe\")) {\r\n            numRand -= recipe.length - 1;\r\n        } else {\r\n            numRand -= recipe.length;\r\n        }\r\n        if (costFiltered.length <= numRand) {\r\n            // Okay to add repeats if not enough valid items\r\n            randItems = costFiltered;\r\n            for (let i = 0; i < numRand - randItems.length; i++) {\r\n                let rand = Math.floor(Math.random() * costFiltered.length);\r\n                randItems.push(costFiltered[rand]);\r\n            }\r\n        } else {\r\n            let alreadyPicked = []\r\n            for (let i = 0; i < numRand; i++) {\r\n                // Try not to add repeats if enough valid items\r\n                let rand;\r\n                do {\r\n                    rand = Math.floor(Math.random() * costFiltered.length);\r\n                }  while (alreadyPicked.includes(rand));\r\n                randItems.push(costFiltered[rand]);\r\n                alreadyPicked.push(rand);\r\n            }\r\n        }\r\n\r\n        components = components.concat(randItems);\r\n        // Shuffle the components\r\n        for (let i = components.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            let tmp = components[i];\r\n            components[i] = components[j];\r\n            components[j] = tmp;\r\n        }\r\n\r\n        this.state = {\r\n            itemsToQuiz: itemsWithRecipe,\r\n            current: 0,\r\n            currentRecipe : recipe,\r\n            currentQuiz : components,\r\n            materials: materialIDs,\r\n            frozen: false,\r\n            streak : 0,\r\n            score : 0,\r\n            tries : 3,\r\n            win : false\r\n        }\r\n    }\r\n\r\n    // Gets the item's object for a given id\r\n    getItemData = (itemID) => {\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (items[i].id === itemID) {\r\n                return items[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Generates the random items to fill the rest of the quiz items with wrong items\r\n    // Tries to generate items that are close in price to the real components\r\n    generateRandomItems = (recipe) => {\r\n        let curr = (this.state.current + 1 >= this.state.itemsToQuiz.length) ? 0 : this.state.current + 1;\r\n        // Get only items that are components (items that build into other items), exclude items included in recipe\r\n        let filtered = items.filter((item) => {\r\n            for (let i = 0; i < recipe.length; i++) {\r\n                \r\n                if (recipe[i] === item.id || this.state.itemsToQuiz[curr].id === item.id) {\r\n                    return false;\r\n                }\r\n            }\r\n            if (this.state.materials.includes(item.id)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n\r\n        // Add exception for power treads (remove band of elvenskin and robe of magi)\r\n        if (this.state.itemsToQuiz[curr].id === \"power_treads\") {\r\n            for (let i = 0; i < filtered.length; i++) {\r\n                if (filtered[i].id === \"robe\" || filtered[i].id === \"boots_of_elves\") {\r\n                    filtered.splice(i, 1);\r\n                    i--;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Get the costs of all items in the current recipe (including recipe cost)\r\n        let componentCosts = [];\r\n        for (let i = 0; i < recipe.length; i++) {\r\n            if (recipe[i] !== \"recipe\") {\r\n                componentCosts.push(this.getItemData(recipe[i]).cost);\r\n            }\r\n        }\r\n        let recipeCost = this.state.itemsToQuiz[curr].RecipeCost;\r\n        if (recipeCost !== 0) {\r\n            componentCosts.push(recipeCost);\r\n        }\r\n\r\n        // Get items only within +/-200 of any item in the recipe\r\n        let costFiltered = filtered.filter((item) => {\r\n            for (let i = 0; i < recipe.length; i++) {\r\n                if (item.cost <= (componentCosts[i] + 200) && item.cost >= (componentCosts[i] - 200)) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        });\r\n\r\n        // Populate randItems with items close in cost to recipe items\r\n        let randItems = [];\r\n        let numRand = 8;\r\n        if (recipe.includes(\"recipe\")) {\r\n            numRand -= recipe.length - 1;\r\n        } else {\r\n            numRand -= recipe.length;\r\n        }\r\n        if (costFiltered.length <= numRand) {\r\n            // Okay to add repeats if not enough valid items\r\n            randItems = costFiltered;\r\n            for (let i = 0; i < numRand - randItems.length; i++) {\r\n                let rand = Math.floor(Math.random() * costFiltered.length);\r\n                randItems.push(costFiltered[rand]);\r\n            }\r\n        } else {\r\n            // Try not to add repeats if enough valid items\r\n            let alreadyPicked = []\r\n            for (let i = 0; i < numRand; i++) {\r\n                let rand;\r\n                do {\r\n                    rand = Math.floor(Math.random() * costFiltered.length);\r\n                }  while (alreadyPicked.includes(rand));\r\n                randItems.push(costFiltered[rand]);\r\n                alreadyPicked.push(rand);\r\n            }\r\n        }\r\n        \r\n        return randItems;\r\n        \r\n    }\r\n\r\n    // Generates all the item ID's for the current quiz (fake and real)\r\n    getQuizComponents = (recipe) => {\r\n        let components = [];\r\n        for (let i = 0; i < recipe.length; i++) {\r\n            if (recipe[i] !== \"recipe\"){\r\n                let component = this.getItemData(recipe[i]);\r\n                if (component === null) {\r\n                    console.log(\"null item! id: \" + recipe[i]);\r\n                }\r\n                components.push(component);\r\n            }\r\n        }\r\n        return components.concat(this.generateRandomItems(recipe));\r\n    }\r\n\r\n    // Generates the JSX for the quiz components\r\n    createQuizComponents = () => {\r\n        let quizItems = []\r\n        for (let i = 0; i < this.state.currentQuiz.length; i++) {\r\n            quizItems.push(<Item key={i} locked={this.state.frozen} id={this.state.currentQuiz[i].id} index={i} clickable={true} easy={this.state.easy}></Item>);\r\n        }\r\n        return quizItems;\r\n    }\r\n\r\n    // Generates the components for the row of mystery icon symbols that will update as items are selected\r\n    createMysteryIcons = () => {\r\n        let selected = [];\r\n        let indicies = [];\r\n        for (let i = 0; i < this.props.selected.length; i++) {\r\n            if (this.props.selected[i] === 8) {\r\n                selected.push(\"recipe\");\r\n            } else {\r\n                selected.push(this.state.currentQuiz[this.props.selected[i]].id);\r\n                indicies.push(this.props.selected[i]);\r\n            }\r\n        }\r\n        let numIcons = this.state.itemsToQuiz[this.state.current].components.length;\r\n        let icons = [];\r\n        for (let i = 0; i < selected.length; i++) {\r\n            icons.push(<MysteryIcon key={i} id={selected[i]} index={indicies[i]} easy={this.state.easy}></MysteryIcon>);\r\n        }\r\n        for (let i = 0; i < numIcons - selected.length; i++) {\r\n            icons.push(<MysteryIcon key={i + selected.length} id={\"unknown\"} index={-1} easy={this.state.easy}></MysteryIcon>);\r\n        }\r\n        return icons;\r\n    }\r\n\r\n    // Loads the next item to quiz, or the win state if there is no more items\r\n    nextQuiz = () => {\r\n        let i = this.state.current + 1;\r\n        if (i < this.state.itemsToQuiz.length) {\r\n            let recipe = this.state.itemsToQuiz[i].components;\r\n            let components = this.getQuizComponents(recipe);\r\n            // Shuffle the components\r\n            for (let j = components.length - 1; j > 0; j--) {\r\n                let k = Math.floor(Math.random() * (j + 1));\r\n                let tmp = components[j];\r\n                components[j] = components[k];\r\n                components[k] = tmp;\r\n            }\r\n            this.setState({\r\n                current: i,\r\n                currentRecipe : recipe,\r\n                currentQuiz : components\r\n            })\r\n        } else {\r\n            this.setState({win : true});\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (!this.state.frozen) {\r\n            // Check which items are selected\r\n            let recipe = this.state.currentRecipe.slice();\r\n            let selected = [];\r\n            for (let i = 0; i < this.props.selected.length; i++) {\r\n                if (this.props.selected[i] === 8) {\r\n                    selected.push(\"recipe\");\r\n                } else {\r\n                    selected.push(this.state.currentQuiz[this.props.selected[i]].id);\r\n                }\r\n                \r\n            }\r\n\r\n            // Only check for correctness if all slots are filled\r\n            if (recipe.length === selected.length) {\r\n                // Check for correctness\r\n                recipe.sort();\r\n                selected.sort();\r\n                let correct = true;\r\n                for (let i = 0; i < recipe.length; i++) {\r\n                    if(recipe[i] !== selected[i]) {\r\n                        correct = false;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // Play the popup animation\r\n                const popup = this.popupRef.current;\r\n                popup.classList.add('play-animation');\r\n\r\n                if (correct) {\r\n                    let currentStreak = this.state.streak;\r\n                    let currentScore = this.state.score;\r\n\r\n                    currentScore += currentStreak * 30 + 200;\r\n                    currentStreak += 1;\r\n\r\n                    this.setState({\r\n                        frozen : true, \r\n                        streak : currentStreak,\r\n                        score : currentScore\r\n                    });\r\n                    // Wait for pop up text animation to end before loading next quiz\r\n                    setTimeout(() => {\r\n                        popup.classList.remove('play-animation');\r\n                        this.props.dispatch(reset());\r\n                        this.nextQuiz();\r\n                        this.setState({frozen : false});\r\n                    }, 1000)\r\n                } else {\r\n                    let currentTries = this.state.tries;\r\n                    currentTries -= 1;\r\n\r\n                    if (currentTries === 0) {\r\n                        this.setState({\r\n                            streak : 0,\r\n                            frozen : true\r\n                        });\r\n\r\n                        // Wait for pop up text animation to end before loading game over screen\r\n                        setTimeout(() => {\r\n                            popup.classList.remove('play-animation');\r\n                            this.setState({\r\n                                tries : currentTries\r\n                            });\r\n                        }, 1000)\r\n\r\n                    } else {\r\n                        this.setState({\r\n                            frozen : true, \r\n                            streak : 0,\r\n                            tries : currentTries\r\n                        });\r\n\r\n                        // Wait for pop up text animation to end before loading next quiz\r\n                        setTimeout(() => {\r\n                            popup.classList.remove('play-animation');\r\n                            this.props.dispatch(reset());\r\n                            this.setState({frozen : false});\r\n                        }, 1000)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Gets the current streak text\r\n    getStreak = () => {\r\n        let text;\r\n        let amount = (this.state.streak > 0) ? this.state.streak * 30 + 170 : 0;\r\n        // Just play the very last streak name for any streaks higher than it\r\n        if (this.state.streak < streakNames.length) {\r\n            text = streakNames[this.state.streak];\r\n        } else {\r\n            text = streakNames[streakNames.length - 1];\r\n        }\r\n        return (\r\n            <div>\r\n                <div>\r\n                    {text}\r\n                </div>\r\n                <div>\r\n                    {this.state.streak > 0 ? \"+\" + amount : \" \"}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Resets the game stat back to the start and also reshuffles the item quiz order\r\n    reset = () => {\r\n        let quiz = this.state.itemsToQuiz.slice();\r\n        // Reshuffling the quiz order\r\n        for (let i = quiz.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            let tmp = quiz[i];\r\n            quiz[i] = quiz[j];\r\n            quiz[j] = tmp;\r\n        }\r\n\r\n        let recipe = quiz[0].components;\r\n        this.setState({current : 0});\r\n        console.log(this.state.itemsToQuiz);\r\n        console.log(this.state.current);\r\n        let components = this.getQuizComponents(recipe);\r\n        // Shuffle the components\r\n        for (let i = components.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            let tmp = components[i];\r\n            components[i] = components[j];\r\n            components[j] = tmp;\r\n        }\r\n\r\n        this.props.dispatch(reset());\r\n        this.setState({\r\n            itemsToQuiz: quiz,\r\n            currentRecipe : recipe,\r\n            currentQuiz : components,\r\n            streak : 0,\r\n            score : 0,\r\n            tries : 3,\r\n            win : false,\r\n            frozen: false\r\n        });\r\n    }\r\n\r\n    setEasy = () => {\r\n        this.props.dispatch(setDifficulty(true));\r\n        this.reset();\r\n    }\r\n\r\n    setHard = () => {\r\n        this.props.dispatch(setDifficulty(false));\r\n        this.reset();\r\n    }\r\n\r\n    render() {\r\n        let gg = <div></div>\r\n        if (this.state.tries <= 0) {\r\n            gg = <EndDialog>\r\n                <LargeText>Game Over</LargeText>\r\n                <LargeText>Final Score: {this.state.score}</LargeText>\r\n                <RestartButton onClick={this.reset}>Restart</RestartButton>\r\n            </EndDialog>\r\n        }\r\n        if (this.state.win) {\r\n            gg = <EndDialog>\r\n                <LargeText>Game Complete!</LargeText>\r\n                <LargeText>Final Score: {this.state.score}</LargeText>\r\n                <RestartButton onClick={this.reset}>Replay?</RestartButton>\r\n            </EndDialog>\r\n        }\r\n        return(\r\n            <Page>\r\n                <h1>Shopkeeper's Quiz</h1>\r\n                <div>\r\n                    <DifficultyButton onClick={this.setEasy} disabled={this.props.easy}>Easy</DifficultyButton>\r\n                    <DifficultyButton onClick={this.setHard} disabled={!this.props.easy}>Hard</DifficultyButton>\r\n                </div>\r\n                <GameMain>\r\n                    <QuizItem>\r\n                        <Item id={this.state.itemsToQuiz[this.state.current].id} locked={this.state.frozen} clickable={false} easy={this.state.easy}></Item>\r\n                    </QuizItem>\r\n                    <Row>\r\n                        {this.createMysteryIcons()}\r\n                    </Row>\r\n                    <Row>\r\n                        {this.createQuizComponents()}\r\n                        <Item id=\"recipe\" locked={this.state.frozen} index={8} clickable={true} easy={this.state.easy}></Item>\r\n                    </Row>\r\n                    <StatText>\r\n                        Guesses Left: {this.state.tries}\r\n                    </StatText>\r\n                    <StatText>\r\n                        Score: {this.state.score}\r\n                    </StatText>\r\n                </GameMain>\r\n                <PopUpText ref={this.popupRef}>\r\n                    {this.getStreak()}\r\n                </PopUpText>\r\n                {gg}\r\n            </Page>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        selected : state.selected,\r\n        easy : state.easy\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Game);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport Game from './components/game/game.js';\nimport produce from 'immer';\n\n\nconst initialState = {\n    selected: [],\n    easy: true\n};\n\nfunction reducer(state = initialState, action) {\n    switch(action.type) {\n        case 'SELECT':\n            return produce(state, draft => {\n                draft.selected.push(action.value);\n            })\n        case 'DESELECT':\n            return produce(state, draft => {\n                draft.selected.splice(draft.selected.indexOf(action.value), 1);\n            })\n        case 'RESET':\n            return {\n                selected: [],\n                easy: state.easy\n            }\n        case 'SET_DIFFICULTY':\n            return {\n                easy: action.value\n            }\n        default:\n            return state;\n    }\n}\n\nconst store = createStore(reducer);\n\nconst App = () => (\n    <Provider store={store}>\n        <Game></Game>\n    </Provider>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}